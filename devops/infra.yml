AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template for creating Aurora MySQL DB cluster and cognito
Parameters:
  ImageTag:
    Type: String
    Default: 'latest'
  Subnet1:
    Type: String
    Default: ""
  Subnet2:
    Type: String
    Default: ""
  SecurityGroup:
    Type: String
    Default: ""
  ResourcePrefix:
    Type: String
    Default: ""
  Stage:
    Type: String
    Default: dev
  Region:
    Type: String
    Default: ""
 
Resources:
  #Resource for ECS
  MyTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-${Stage}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: ECSServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - dynamodb:*
                  - s3:*
                  - sqs:*
                  - apigateway:*
                Resource: "*"
        
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ResourcePrefix}-${Stage}-task-definition
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Memory: '1024'
      EphemeralStorage:
        SizeInGiB: 21
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ExecutionRoleArn: !GetAtt MyTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: ocilex-image-detection-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ResourcePrefix}-image-detection-dev-ecr:${ImageTag}"
          Cpu: 0
          Memory: 1024
          PortMappings:
            - Name: "flask_port"
              ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
              AppProtocol: http
          Essential: true
          EntryPoint:
            - /bin/bash
            - -c
          Command:
            - bash /home/ubuntu/initial_script.sh
          Environment: 
            - Name: REGION
              Value: !Ref Region
            - Name: REPO_URL
              Value: !Ref RepoUrl
          EnvironmentFiles: []
          MountPoints: []
          VolumesFrom: []
          WorkingDirectory: /home/ubuntu
          Ulimits: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/ocilex-image-detection-task-definition-updated
              awslogs-create-group: "true"
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
            SecretOptions: []
          SystemControls: []
  
  

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ResourcePrefix}-${Stage}-ecs-cluster

  MyService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      ServiceName: !Sub ${ResourcePrefix}-${Stage}-service
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: ENABLED
  
Outputs:
  MyTaskExecutionRole:
    Value: !GetAtt MyTaskExecutionRole.Arn
  